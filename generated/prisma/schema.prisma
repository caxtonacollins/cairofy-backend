// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid()) @db.Uuid
  walletAddress String    @unique @map("wallet_address") @db.VarChar(255)
  username      String?   @db.VarChar(255)
  email         String?   @unique @db.VarChar(255)
  createdAt     DateTime? @map("created_at") @db.Timestamp()
  updatedAt     DateTime? @map("updated_at") @db.Timestamp()
  isArtist      Boolean?  @map("is_artist")

  // Relations  
  songs          Song[]
  subscriptions  UserSubscription[]
  artistMetadata ArtistMetadata?
  playlists      Playlist[]
  favoriteSongs  FavoriteSong[]
  likedSongs     LikedSong[]

  @@map("users")
}

model Song {
  id              String    @id @default(uuid()) @db.Uuid
  name            String    @db.VarChar(255)
  ipfsHash        String    @map("ipfs_hash") @db.VarChar(255)
  previewIpfsHash String    @map("preview_ipfs_hash") @db.VarChar(255)
  price           Decimal   @db.Decimal(20, 8)
  ownerId         String?   @map("owner_id") @db.Uuid
  forSale         Boolean?  @map("for_sale")
  createdAt       DateTime? @map("created_at") @db.Timestamp()
  updatedAt       DateTime? @map("updated_at") @db.Timestamp()

  // Relations  
  owner         User?          @relation(fields: [ownerId], references: [id])
  playlistSongs PlaylistSong[]
  favoriteSongs FavoriteSong[]
  likedSongs    LikedSong[]
  stats         SongStats?

  @@map("songs")
}

model UserSubscription {
  id        String    @id @default(uuid()) @db.Uuid
  userId    String    @map("user_id") @db.Uuid
  planType  String    @map("plan_type") @db.VarChar(50)
  isActive  Boolean?  @map("is_active")
  startDate DateTime? @map("start_date") @db.Timestamp()
  endDate   DateTime? @map("end_date") @db.Timestamp()
  amount    Decimal?  @db.Decimal(10, 2)

  // Relations  
  user User @relation(fields: [userId], references: [id])

  @@map("user_subscriptions")
}

model ArtistMetadata {
  id           String  @id @default(uuid()) @db.Uuid
  userId       String  @unique @map("user_id") @db.Uuid
  profileImage String? @map("profile_image") @db.VarChar(255)
  bio          String? @db.Text
  socialLinks  Json?   @map("social_links") @db.JsonB
  totalSongs   Int?    @map("total_songs")
  totalSales   Int?    @map("total_sales")

  // Relations  
  user User @relation(fields: [userId], references: [id])

  @@map("artist_metadata")
}

model Playlist {
  id          String    @id @default(uuid()) @db.Uuid
  userId      String    @map("user_id") @db.Uuid
  name        String    @db.VarChar(255)
  description String?   @db.Text
  createdAt   DateTime? @map("created_at") @db.Timestamp()
  songCount   Int?      @map("song_count")

  // Relations  
  user  User           @relation(fields: [userId], references: [id])
  songs PlaylistSong[]

  @@map("playlists")
}

model PlaylistSong {
  id         String @id @default(uuid()) @db.Uuid
  playlistId String @map("playlist_id") @db.Uuid
  songId     String @map("song_id") @db.Uuid
  position   Int?

  // Relations  
  playlist Playlist @relation(fields: [playlistId], references: [id])
  song     Song     @relation(fields: [songId], references: [id])

  @@map("playlist_songs")
}

model FavoriteSong {
  id      String    @id @default(uuid()) @db.Uuid
  userId  String    @map("user_id") @db.Uuid
  songId  String    @map("song_id") @db.Uuid
  addedAt DateTime? @map("added_at") @db.Timestamp()

  // Relations  
  user User @relation(fields: [userId], references: [id])
  song Song @relation(fields: [songId], references: [id])

  @@map("favorite_songs")
}

model LikedSong {
  id      String    @id @default(uuid()) @db.Uuid
  userId  String    @map("user_id") @db.Uuid
  songId  String    @map("song_id") @db.Uuid
  likedAt DateTime? @map("liked_at") @db.Timestamp()

  // Relations  
  user User @relation(fields: [userId], references: [id])
  song Song @relation(fields: [songId], references: [id])

  @@map("liked_songs")
}

model SongStats {
  id            String    @id @default(uuid()) @db.Uuid
  songId        String    @unique @map("song_id") @db.Uuid
  playCount     Int?      @map("play_count")
  favoriteCount Int?      @map("favorite_count")
  likeCount     Int?      @map("like_count")
  lastPlayed    DateTime? @map("last_played") @db.Timestamp()

  // Relations  
  song Song @relation(fields: [songId], references: [id])

  @@map("song_stats")
}

model PlatformStats {
  id               String    @id @default(uuid()) @db.Uuid
  totalSongs       Int?      @map("total_songs")
  totalUsers       Int?      @map("total_users")
  totalArtists     Int?      @map("total_artists")
  totalPlays       Int?      @map("total_plays")
  totalSales       Int?      @map("total_sales")
  totalSalesVolume Decimal?  @map("total_sales_volume") @db.Decimal(20, 8)
  updatedAt        DateTime? @map("updated_at") @db.Timestamp()

  @@map("platform_stats")
}
